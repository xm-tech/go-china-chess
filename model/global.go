// 棋子坐标
package model

import "fmt"

// 己方16颗棋子出生点
var ChessBothA = [16][3]int{
	// {棋子类别, x, y}
	{0, 0 + 8 + 56*0, 576 - 56 + 8},                // 车
	{1, 0 + 8 + 56*1, 576 - 56 + 8},                // 左马
	{2, 0 + 8 + 56*2, 576 - 56 + 8},                // 左相
	{3, 0 + 8 + 56*3, 576 - 56 + 8},                // 左士
	{4, 0 + 8 + 56*4, 576 - 56 + 8},                // 将
	{3, 0 + 8 + 56*5, 576 - 56 + 8},                // 右士
	{2, 0 + 8 + 56*6, 576 - 56 + 8},                // 右相
	{1, 0 + 8 + 56*7, 576 - 56 + 8},                // 右马
	{0, 0 + 8 + 56*8, 576 - 56 + 8},                // 右车
	{5, 0 + 8 + 56*1, 576 - 56 - 56 - 56 + 8},      // 左炮
	{5, 0 + 8 + 56*7, 576 - 56 - 56 - 56 + 8},      // 右炮
	{6, 0 + 8 + 56*0, 576 - 56 - 56 - 56 - 56 + 8}, // 兵1
	{6, 0 + 8 + 56*2, 576 - 56 - 56 - 56 - 56 + 8}, // 兵2
	{6, 0 + 8 + 56*4, 576 - 56 - 56 - 56 - 56 + 8}, // 兵3
	{6, 0 + 8 + 56*6, 576 - 56 - 56 - 56 - 56 + 8}, // 兵4
	{6, 0 + 8 + 56*8, 576 - 56 - 56 - 56 - 56 + 8}, // 兵5
}

// 对方16颗棋子出生点
var ChessBothB = [16][3]int{
	// {棋子类别, x, y}
	{0, 0 + 8 + 56*0, 8},        // 车
	{1, 0 + 8 + 56*1, 8},        // 左马
	{2, 0 + 8 + 56*2, 8},        // 左相
	{3, 0 + 8 + 56*3, 8},        // 左士
	{4, 0 + 8 + 56*4, 8},        // 将
	{3, 0 + 8 + 56*5, 8},        // 右士
	{2, 0 + 8 + 56*6, 8},        // 右相
	{1, 0 + 8 + 56*7, 8},        // 右马
	{0, 0 + 8 + 56*8, 8},        // 右车
	{5, 0 + 8 + 56*1, 8 + 56*2}, // 左炮
	{5, 0 + 8 + 56*7, 8 + 56*2}, // 右炮
	{6, 0 + 8 + 56*0, 8 + 56*3}, // 兵1
	{6, 0 + 8 + 56*2, 8 + 56*3}, // 兵2
	{6, 0 + 8 + 56*4, 8 + 56*3}, // 兵3
	{6, 0 + 8 + 56*6, 8 + 56*3}, // 兵4
	{6, 0 + 8 + 56*8, 8 + 56*3}, // 兵5
}

// 棋盘上的棋子编号
var PosChesses = [90]int{
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1,
}

// 根据坐标得到棋盘位置编号
func GetPosByCoord(x, y int) int {
	var gx int
	if (x - BoardEdgeWidth) < 0 {
		gx = 0
	} else {
		gx = (x - BoardEdgeWidth) / GridSize
	}
	if gx > 8 {
		gx = 8
	}
	var gy int
	if (y - BoardEdgeWidth) < 0 {
		gy = 0
	} else {
		gy = (y - BoardEdgeWidth) / GridSize
	}
	if gy > 9 {
		gy = 9
	}
	fmt.Printf("GetPosByCoord,x=%v,y=%v,gx=%v,gy=%v,g=%v\n", x, y, gx, gy, gy*9+gx)
	return gy*9 + gx
}
